// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_protocol_2eproto__INCLUDED
#define PROTOBUF_protocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2eproto();
void protobuf_AssignDesc_protocol_2eproto();
void protobuf_ShutdownFile_protocol_2eproto();

class HelloRequest;
class DataMessage;
class RealMessage;
class DeviceList;

enum DeviceList_deviceType {
  DeviceList_deviceType_Sensor = 1,
  DeviceList_deviceType_Device = 2
};
bool DeviceList_deviceType_IsValid(int value);
const DeviceList_deviceType DeviceList_deviceType_deviceType_MIN = DeviceList_deviceType_Sensor;
const DeviceList_deviceType DeviceList_deviceType_deviceType_MAX = DeviceList_deviceType_Device;
const int DeviceList_deviceType_deviceType_ARRAYSIZE = DeviceList_deviceType_deviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceList_deviceType_descriptor();
inline const ::std::string& DeviceList_deviceType_Name(DeviceList_deviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceList_deviceType_descriptor(), value);
}
inline bool DeviceList_deviceType_Parse(
    const ::std::string& name, DeviceList_deviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceList_deviceType>(
    DeviceList_deviceType_descriptor(), name, value);
}
// ===================================================================

class HelloRequest : public ::google::protobuf::Message {
 public:
  HelloRequest();
  virtual ~HelloRequest();
  
  HelloRequest(const HelloRequest& from);
  
  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloRequest& default_instance();
  
  void Swap(HelloRequest* other);
  
  // implements Message ----------------------------------------------
  
  HelloRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloRequest& from);
  void MergeFrom(const HelloRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string customerID = 1;
  inline bool has_customerid() const;
  inline void clear_customerid();
  static const int kCustomerIDFieldNumber = 1;
  inline const ::std::string& customerid() const;
  inline void set_customerid(const ::std::string& value);
  inline void set_customerid(const char* value);
  inline void set_customerid(const char* value, size_t size);
  inline ::std::string* mutable_customerid();
  inline ::std::string* release_customerid();
  
  // required string deviceName = 2;
  inline bool has_devicename() const;
  inline void clear_devicename();
  static const int kDeviceNameFieldNumber = 2;
  inline const ::std::string& devicename() const;
  inline void set_devicename(const ::std::string& value);
  inline void set_devicename(const char* value);
  inline void set_devicename(const char* value, size_t size);
  inline ::std::string* mutable_devicename();
  inline ::std::string* release_devicename();
  
  // required bool isBox = 3;
  inline bool has_isbox() const;
  inline void clear_isbox();
  static const int kIsBoxFieldNumber = 3;
  inline bool isbox() const;
  inline void set_isbox(bool value);
  
  // @@protoc_insertion_point(class_scope:HelloRequest)
 private:
  inline void set_has_customerid();
  inline void clear_has_customerid();
  inline void set_has_devicename();
  inline void clear_has_devicename();
  inline void set_has_isbox();
  inline void clear_has_isbox();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* customerid_;
  ::std::string* devicename_;
  bool isbox_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();
  
  void InitAsDefaultInstance();
  static HelloRequest* default_instance_;
};
// -------------------------------------------------------------------

class DataMessage : public ::google::protobuf::Message {
 public:
  DataMessage();
  virtual ~DataMessage();
  
  DataMessage(const DataMessage& from);
  
  inline DataMessage& operator=(const DataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataMessage& default_instance();
  
  void Swap(DataMessage* other);
  
  // implements Message ----------------------------------------------
  
  DataMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataMessage& from);
  void MergeFrom(const DataMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string deviceName = 1;
  inline bool has_devicename() const;
  inline void clear_devicename();
  static const int kDeviceNameFieldNumber = 1;
  inline const ::std::string& devicename() const;
  inline void set_devicename(const ::std::string& value);
  inline void set_devicename(const char* value);
  inline void set_devicename(const char* value, size_t size);
  inline ::std::string* mutable_devicename();
  inline ::std::string* release_devicename();
  
  // required .RealMessage dataMesg = 2;
  inline bool has_datamesg() const;
  inline void clear_datamesg();
  static const int kDataMesgFieldNumber = 2;
  inline const ::RealMessage& datamesg() const;
  inline ::RealMessage* mutable_datamesg();
  inline ::RealMessage* release_datamesg();
  
  // @@protoc_insertion_point(class_scope:DataMessage)
 private:
  inline void set_has_devicename();
  inline void clear_has_devicename();
  inline void set_has_datamesg();
  inline void clear_has_datamesg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* devicename_;
  ::RealMessage* datamesg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();
  
  void InitAsDefaultInstance();
  static DataMessage* default_instance_;
};
// -------------------------------------------------------------------

class RealMessage : public ::google::protobuf::Message {
 public:
  RealMessage();
  virtual ~RealMessage();
  
  RealMessage(const RealMessage& from);
  
  inline RealMessage& operator=(const RealMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealMessage& default_instance();
  
  void Swap(RealMessage* other);
  
  // implements Message ----------------------------------------------
  
  RealMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RealMessage& from);
  void MergeFrom(const RealMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string hardwareID = 1;
  inline bool has_hardwareid() const;
  inline void clear_hardwareid();
  static const int kHardwareIDFieldNumber = 1;
  inline const ::std::string& hardwareid() const;
  inline void set_hardwareid(const ::std::string& value);
  inline void set_hardwareid(const char* value);
  inline void set_hardwareid(const char* value, size_t size);
  inline ::std::string* mutable_hardwareid();
  inline ::std::string* release_hardwareid();
  
  // required float data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline float data() const;
  inline void set_data(float value);
  
  // required string timeStamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 3;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  
  // @@protoc_insertion_point(class_scope:RealMessage)
 private:
  inline void set_has_hardwareid();
  inline void clear_has_hardwareid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* hardwareid_;
  ::std::string* timestamp_;
  float data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();
  
  void InitAsDefaultInstance();
  static RealMessage* default_instance_;
};
// -------------------------------------------------------------------

class DeviceList : public ::google::protobuf::Message {
 public:
  DeviceList();
  virtual ~DeviceList();
  
  DeviceList(const DeviceList& from);
  
  inline DeviceList& operator=(const DeviceList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceList& default_instance();
  
  void Swap(DeviceList* other);
  
  // implements Message ----------------------------------------------
  
  DeviceList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceList& from);
  void MergeFrom(const DeviceList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DeviceList_deviceType deviceType;
  static const deviceType Sensor = DeviceList_deviceType_Sensor;
  static const deviceType Device = DeviceList_deviceType_Device;
  static inline bool deviceType_IsValid(int value) {
    return DeviceList_deviceType_IsValid(value);
  }
  static const deviceType deviceType_MIN =
    DeviceList_deviceType_deviceType_MIN;
  static const deviceType deviceType_MAX =
    DeviceList_deviceType_deviceType_MAX;
  static const int deviceType_ARRAYSIZE =
    DeviceList_deviceType_deviceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  deviceType_descriptor() {
    return DeviceList_deviceType_descriptor();
  }
  static inline const ::std::string& deviceType_Name(deviceType value) {
    return DeviceList_deviceType_Name(value);
  }
  static inline bool deviceType_Parse(const ::std::string& name,
      deviceType* value) {
    return DeviceList_deviceType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string deviceID = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIDFieldNumber = 1;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  
  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:DeviceList)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* deviceid_;
  ::std::string* description_;
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();
  
  void InitAsDefaultInstance();
  static DeviceList* default_instance_;
};
// ===================================================================


// ===================================================================

// HelloRequest

// required string customerID = 1;
inline bool HelloRequest::has_customerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloRequest::set_has_customerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelloRequest::clear_has_customerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelloRequest::clear_customerid() {
  if (customerid_ != &::google::protobuf::internal::kEmptyString) {
    customerid_->clear();
  }
  clear_has_customerid();
}
inline const ::std::string& HelloRequest::customerid() const {
  return *customerid_;
}
inline void HelloRequest::set_customerid(const ::std::string& value) {
  set_has_customerid();
  if (customerid_ == &::google::protobuf::internal::kEmptyString) {
    customerid_ = new ::std::string;
  }
  customerid_->assign(value);
}
inline void HelloRequest::set_customerid(const char* value) {
  set_has_customerid();
  if (customerid_ == &::google::protobuf::internal::kEmptyString) {
    customerid_ = new ::std::string;
  }
  customerid_->assign(value);
}
inline void HelloRequest::set_customerid(const char* value, size_t size) {
  set_has_customerid();
  if (customerid_ == &::google::protobuf::internal::kEmptyString) {
    customerid_ = new ::std::string;
  }
  customerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelloRequest::mutable_customerid() {
  set_has_customerid();
  if (customerid_ == &::google::protobuf::internal::kEmptyString) {
    customerid_ = new ::std::string;
  }
  return customerid_;
}
inline ::std::string* HelloRequest::release_customerid() {
  clear_has_customerid();
  if (customerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = customerid_;
    customerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string deviceName = 2;
inline bool HelloRequest::has_devicename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HelloRequest::set_has_devicename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HelloRequest::clear_has_devicename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HelloRequest::clear_devicename() {
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    devicename_->clear();
  }
  clear_has_devicename();
}
inline const ::std::string& HelloRequest::devicename() const {
  return *devicename_;
}
inline void HelloRequest::set_devicename(const ::std::string& value) {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(value);
}
inline void HelloRequest::set_devicename(const char* value) {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(value);
}
inline void HelloRequest::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelloRequest::mutable_devicename() {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  return devicename_;
}
inline ::std::string* HelloRequest::release_devicename() {
  clear_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devicename_;
    devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool isBox = 3;
inline bool HelloRequest::has_isbox() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HelloRequest::set_has_isbox() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HelloRequest::clear_has_isbox() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HelloRequest::clear_isbox() {
  isbox_ = false;
  clear_has_isbox();
}
inline bool HelloRequest::isbox() const {
  return isbox_;
}
inline void HelloRequest::set_isbox(bool value) {
  set_has_isbox();
  isbox_ = value;
}

// -------------------------------------------------------------------

// DataMessage

// required string deviceName = 1;
inline bool DataMessage::has_devicename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataMessage::set_has_devicename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataMessage::clear_has_devicename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataMessage::clear_devicename() {
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    devicename_->clear();
  }
  clear_has_devicename();
}
inline const ::std::string& DataMessage::devicename() const {
  return *devicename_;
}
inline void DataMessage::set_devicename(const ::std::string& value) {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(value);
}
inline void DataMessage::set_devicename(const char* value) {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(value);
}
inline void DataMessage::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataMessage::mutable_devicename() {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  return devicename_;
}
inline ::std::string* DataMessage::release_devicename() {
  clear_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devicename_;
    devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .RealMessage dataMesg = 2;
inline bool DataMessage::has_datamesg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataMessage::set_has_datamesg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataMessage::clear_has_datamesg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataMessage::clear_datamesg() {
  if (datamesg_ != NULL) datamesg_->::RealMessage::Clear();
  clear_has_datamesg();
}
inline const ::RealMessage& DataMessage::datamesg() const {
  return datamesg_ != NULL ? *datamesg_ : *default_instance_->datamesg_;
}
inline ::RealMessage* DataMessage::mutable_datamesg() {
  set_has_datamesg();
  if (datamesg_ == NULL) datamesg_ = new ::RealMessage;
  return datamesg_;
}
inline ::RealMessage* DataMessage::release_datamesg() {
  clear_has_datamesg();
  ::RealMessage* temp = datamesg_;
  datamesg_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// RealMessage

// required string hardwareID = 1;
inline bool RealMessage::has_hardwareid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RealMessage::set_has_hardwareid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RealMessage::clear_has_hardwareid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RealMessage::clear_hardwareid() {
  if (hardwareid_ != &::google::protobuf::internal::kEmptyString) {
    hardwareid_->clear();
  }
  clear_has_hardwareid();
}
inline const ::std::string& RealMessage::hardwareid() const {
  return *hardwareid_;
}
inline void RealMessage::set_hardwareid(const ::std::string& value) {
  set_has_hardwareid();
  if (hardwareid_ == &::google::protobuf::internal::kEmptyString) {
    hardwareid_ = new ::std::string;
  }
  hardwareid_->assign(value);
}
inline void RealMessage::set_hardwareid(const char* value) {
  set_has_hardwareid();
  if (hardwareid_ == &::google::protobuf::internal::kEmptyString) {
    hardwareid_ = new ::std::string;
  }
  hardwareid_->assign(value);
}
inline void RealMessage::set_hardwareid(const char* value, size_t size) {
  set_has_hardwareid();
  if (hardwareid_ == &::google::protobuf::internal::kEmptyString) {
    hardwareid_ = new ::std::string;
  }
  hardwareid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RealMessage::mutable_hardwareid() {
  set_has_hardwareid();
  if (hardwareid_ == &::google::protobuf::internal::kEmptyString) {
    hardwareid_ = new ::std::string;
  }
  return hardwareid_;
}
inline ::std::string* RealMessage::release_hardwareid() {
  clear_has_hardwareid();
  if (hardwareid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hardwareid_;
    hardwareid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required float data = 2;
inline bool RealMessage::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RealMessage::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RealMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RealMessage::clear_data() {
  data_ = 0;
  clear_has_data();
}
inline float RealMessage::data() const {
  return data_;
}
inline void RealMessage::set_data(float value) {
  set_has_data();
  data_ = value;
}

// required string timeStamp = 3;
inline bool RealMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RealMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RealMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RealMessage::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& RealMessage::timestamp() const {
  return *timestamp_;
}
inline void RealMessage::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void RealMessage::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void RealMessage::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RealMessage::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* RealMessage::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DeviceList

// required string deviceID = 1;
inline bool DeviceList::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceList::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceList::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceList::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& DeviceList::deviceid() const {
  return *deviceid_;
}
inline void DeviceList::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void DeviceList::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void DeviceList::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceList::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* DeviceList::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string description = 2;
inline bool DeviceList::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceList::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceList::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceList::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& DeviceList::description() const {
  return *description_;
}
inline void DeviceList::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void DeviceList::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void DeviceList::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceList::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* DeviceList::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string name = 3;
inline bool DeviceList::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceList::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceList::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceList::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DeviceList::name() const {
  return *name_;
}
inline void DeviceList::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DeviceList::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DeviceList::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceList::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DeviceList::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeviceList_deviceType>() {
  return ::DeviceList_deviceType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2eproto__INCLUDED
